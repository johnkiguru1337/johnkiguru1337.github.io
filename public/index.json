
[{"content":"","date":"31 July 2024","externalUrl":null,"permalink":"/tags/cheatsheet/","section":"Tags","summary":"","title":"Cheatsheet","type":"tags"},{"content":"","date":"31 July 2024","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":" A sub-title # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nibh nisl, vulputate eu lacus vitae, maximus molestie libero. Vestibulum laoreet, odio et sollicitudin sollicitudin, quam ligula tempus urna, sed sagittis eros eros ac felis. In tristique tortor vitae lacinia commodo. Mauris venenatis ultrices purus nec fermentum. Nunc sit amet aliquet metus. Morbi nisl felis, gravida ac consequat vitae, blandit eu libero. Curabitur porta est in dui elementum porttitor. Maecenas fermentum, tortor ac feugiat fringilla, orci sem sagittis massa, a congue risus ipsum vel massa. Aliquam sit amet nunc vulputate, facilisis neque in, faucibus nisl.\n","date":"31 July 2024","externalUrl":null,"permalink":"/posts/linux-cheatsheet/","section":"Blog Posts","summary":"This is a linux cheatsheet handbook","title":"Linux HandBook","type":"posts"},{"content":"","date":"31 July 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"31 July 2024","externalUrl":null,"permalink":"/","section":"Trustie","summary":"","title":"Trustie","type":"page"},{"content":"","date":"31 July 2024","externalUrl":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":" Windows # In most corporate environments, you will find extensive usage of Windows Microsoft Operating System. It is barely inevitable to miss this operating system during a security assessment. Most Unix-Oses are used for server operations while Windows is used for day to day operations.\nHelpful Points # For Domain-level Security, a server, be it smb or ftp acts as a member of a windows domain. Each domain has at least one domain controller usually windows NT server providing password authentication. The DC Provides the workgroup with a definitive password server. The DCs keep track of users and passwords in their own NTDS.dit and Security Authentication Module (SAM) and authenticate each user when they log in for the first time and wish to access another machine\u0026rsquo;s share.\nAll the secrets in an Active Directory Environment are stored in NTDS.dit file, We can use it to carry out a DCSync attack.\nIf you found a bi-directional parent-child trust, one way you would abuse it, is the using Golden-ticket attack.\nTricks # At times Tools will fail in a windows reverse shell or remote session. In this case you can try get another shell and try the tool again. What can I say at times Windows is Weird! Running Windows Powershell exist as a default rule in most modern EDRs. It is almost inevitable for an EDR to miss you when you execute powershell. Instead windows cmd is a little bit safer and stealthier since, EDR won\u0026rsquo;t really know whether the process is malicious not until it inspects the commands being issued. ","date":"31 July 2024","externalUrl":null,"permalink":"/posts/windows-cheatsheet/","section":"Blog Posts","summary":"This is a windows cheatsheet handbook","title":"Windows HandBook","type":"posts"},{"content":" ~/About me$ # I am the one you\u0026rsquo;ve been looking for, like a bug in your code! I recently came across this article, it made me chuckle :)\n\u0026ldquo;But did you, in your three-piece psychology and 1950’s technobrain, never take a look behind the eyes of the hacker ? Did you ever wonder what made him tick, what forces shaped him, what may have molded him?I am a hacker, enter my world… Mine is a world that begins with school… I’m smarter than most of the other kids, this crap they teach us bores me… Damn underachiever. They’re all alike.\u0026rdquo;\n~The Mentor.\n~/Experience$ # Cyber1 Solutions : Dec 2023 - Present (CyberSecurity Consultant) Cyber1 Solutions : Jul 2023 - Nov 2023 (CyberSecurity Analyst Intern) iLab Africa : Jan 2023 - Jun 2023 (Tai SOC Intern) Amnet CyberDefense Netron : Sept 2022 - Nov 2022 (Junior Penetration Tester) ~/Areas of interest$ # Binary Exploitation Exploit Dev ( A small tour into the Kernel land ) Web Application Security Mobile Application Security Network Security Windows, Linux Internals Security Research Hardware Hacking\n~/Certifications$ # 2024 # Coming soon. 2023 # Offensive Security Wireless Professional (OSWP) - Offensive Security Web Application Testing Essentials - Offensive Security Kali Linux Certified Professional (KLCP) - Offensive Security Security Operation Essentials - Offensive Security Network Penetration Testing Essentials – Offensive Security ~/Education$ # Bachelor\u0026rsquo;s degree in Information Technology Second Class - Upper Division - Class of 2024 ","date":"30 July 2024","externalUrl":null,"permalink":"/about/","section":"About me","summary":"portfolio","title":"About me","type":"about"},{"content":"","date":"30 July 2024","externalUrl":null,"permalink":"/tags/about-me/","section":"Tags","summary":"","title":"About Me","type":"tags"},{"content":" Definition # Sigreturn-oriented programming (SROP) is an exploit development technique used to execute code, this attack employs the same basic assumptions behind the return-oriented programming (ROP) technique. When a signal occurs, the kernel “pauses” the process’s execution in order to jump to a signal handler routine. In order to safely resume the execution after the handler, the context of that process is pushed/saved on the stack (registers, flags, instruction pointer, stack pointer etc). When the handler is finished, sigreturn() is called which will restore the context of the process by popping the values off of the stack. This is what is being exploited in this technique.\nWe will cover (probably not exhaustively):\nthe different ways that can be used to exploit a x64/x86 binary using the SROP method. The different ways to set the eax register to 0xf Examples of custom sigcontexts Locating a jump addresses using gdb-peda The different ways to set the eax register to 0xf # \u0026gt; The trivial case: we have a mov eax, 0xf gagdet # the case where this gadget is present in the binary is the simplest to exploit, since it will allow us to place 0xf into the eax register in a single action\n➜ srop ropper --file srop --search \u0026#34;mov eax, 0xf; ret\u0026#34; [INFO] Load gadgets from cache [LOAD] loading... 100% [LOAD] removing double gadgets... 100% [INFO] Searching for gadgets: mov eax, 0xf; ret [INFO] File: srop 0x0000000000401134: mov eax, 0xf; ret; With these two gadgets, building an exploit becomes very simple Here is the structure of our exploit.\nPadding until we reach the saved rip address of the mov eax, 0xf ; ret gadget ( 0x0000000000401134 ) address of the syscall ; ret gadget ( 0x0000000000401139 ) SigContext structure with the desired parameters \u0026gt; Using the pop eax; ret gadget # This case is a “variant” of the previous one where it is still rather simple to put the value 0xf in the eax register.\n➜ srop ropper --file srop --search \u0026#34;pop\u0026#34; [INFO] Load gadgets from cache [LOAD] loading... 100% [LOAD] removing double gadgets... 100% [INFO] Searching for gadgets: pop [INFO] File: srop 0x000000000040110d: pop eax; ret; Here is the structure of our exploit.\nPadding until we reach the saved rip address of the pop eax ; ret gadget ( 0x0000000000401020 ) 0xf (sigreturn syscall number) address of the syscall ; ret gadget ( 0x000000000040101b ) SigContext structure with the desired parameters \u0026gt; Use the read syscall to set the eax register to 0xf # An interesting thing to know is that the read syscall records the number of bytes read into the eax register.There are two methods to set the value 0xf in eax using the read syscall:\na) Using the mov eax, 0x0 gadget # Padding until we reach the saved rip address of the mov eax, 0x0; ret gadget address of the syscall ; ret gadget. Then we send a 15 bytes (0xf -\u0026gt; 15 in decimal) string to the binary, which will allow us to place the value 0xf in eax . And finally : address of the syscall; ret gadget SigContext structure with the desired parameters b) Using the pop eax gadget # Padding until we reach the saved rip address of the pop eax; ret gadget, send 0x0 (read syscall number) address of the syscall; retgadget Then we send a 15 bytes string to the binary, which will allow us to place the value 0xf in eax and finally : address of the syscall; ret gadget SigContext structure with the desired parameters Examples of custom sigcontexts # Once you have figured out how to call the sigreturn syscall, you need to figure out how to get a shell through the context that will be restored from the stack.\na) If the binary contains the /bin/sh string # The idea is to call the execve function ( syscall 0x3b -\u0026gt; 59 in decimal ) with the string /bin/sh as parameter which will give us a shell. The string /bin/sh can either be present in the binary or you can write it in a memory area whose you know the address.\n| — — — — — — — — — | Register | value | |— — — — — — — — — — — — — — — — — — | rip | syscall instruction address | | — — — — — — — — — — — — — — — — — — | rax | 0x3b (execve syscall) | |— — — — — — — — — — — — — — — | rdi | address of /bin/sh | |— — — — — — — — — — — — — - | rsi | 0x0 (NULL) | |— — — — — — — — — — | rdx | 0x0 (NULL) | |— — — — — — — — — — b) Use mprotect # We use mprotect to make a memory area of our choice executable and writable to allow shellcode execution at that address. Then we shift the stack to that area so we can easily write data to it. We put in rsp the address containing the entry point of the program to ensure a normal controlflow. We can then arrange to redirect the program to the shellcode address, which will be executed despite the NX protection.\n|— — — — — — — — — | Register | value | | — — — — — — — — — — — — — — — - | rax | 0xa (`mprotect` `syscall`) | | — — — — — — — — — — — — — — —- | rdi | shellcode address | |— — — — — — — — — — — — — — — — — | rsi | size (0x1000 for exemple) | |— — — — — — — — — — — — — — — — — | rdx | 0x7 -\u0026gt; mode (rwx) | |— — — — — — — — — — — — — — — | rsp | entrypoint (new stack) | |— — — — — — — — — — — — — — — — — — — — — - | rip | address of the `syscall`; ret gadget | |— — — — — — — — — — — — — — — — — — — — — Refs # https://mutur4.github.io/posts/binary-exploitation/srop/ https://bananamafia.dev/post/srop/ https://ctf--wiki-org.translate.goog/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/?_x_tr_sl=auto\u0026_x_tr_tl=en\u0026_x_tr_hl=en-GB https://trustie.medium.com/sick-rop-htb-pwn-challenge-9b1310d9a6b ","date":"30 July 2024","externalUrl":null,"permalink":"/posts/srop/","section":"Blog Posts","summary":"Anything you want to know about SROP technique","title":"Sigreturn Oriented Programming","type":"posts"},{"content":"","date":"30 July 2024","externalUrl":null,"permalink":"/tags/srop/","section":"Tags","summary":"","title":"SROP","type":"tags"},{"content":"","date":"28 July 2024","externalUrl":null,"permalink":"/tags/medium/","section":"Tags","summary":"","title":"Medium","type":"tags"},{"content":" About # My medium Blog has been up since 2021 December. It contains a selection of writeups for CTFs I enjoyed playing. In addition it also has some reviews of the exams that I have done. It will continue being my go to, when it comes to posting CTF writeups. In here you will find articles carefully selected to explain certain techniques I use in my day to day stuffs.\nArticles # 2024 # OSWP exam review 2024 - [exam review, Offesive Security Wireless Professional] How To Hack a Wordpress Site → Mr Robot THM - [Tryhackme, wordpress, hydra, wpscan] 2023 # KLCP exam review december 2023 - [Kali Linux Certified Professional, exam review] GlacierCTF 2022 (Heap — Fastbin Dup) - [Fastbin Dup, Bins explained, heap] Shakti CTF : House of Force - [house of force, heap] ImaginaryCTF 2023 - [pwn, stack pivot + GOT Overwrite] Sick ROP : HTB pwn challenge - [SROP mprotect] HEROCTF - [perl chmod, pdf-parser, pyjail] Escape Coursework : HTB - [machine, HackTheBox, windows] SPACEHEROES CTF - [rust, crypto, world of tomorrow, rsa, blank file, reflected XSS, CSP bypass, AI jail break, waveform, ICMP data] PENETRATION TESTING : DAY X - [source code review, XSS, SQL Injection, CSRF, Password Attacks, python3] BIC CTF : pwn challenge - [pwn] 2022 # Sick rop : Urchinsec Hackathon challenge - [SROP example, pwn] SROP - [SROP definition, SROP registers, pwn] MOUNT A FILE SYSTEM IN LINUX | DEMO: SQUASHED HTB EASY BOX - [HackTheBox, machine, mount, nfs] H4K-IT CTF - [machines, OSINT, SSTI, Threaded Python Script, cewl] Snyk CTF - [web] Sub-Saharan Africa Regional Cybersecurity CTF - [Malware, reverse engineering, Pyinstaller, pyinstxtractor, pydisasm, python jailbreak] Vault: Linux Incident Response - [linux, awk, sed] BLACK HAT MIDDLE EAST AND AFRICA CTF - [source code review, php, format string vulnerability, pwn] KCA INTERVASITY CTF - [pwn, sockets, mobile] Tyler machine writeup - [Tryhackme, Koth, Linux, Machine] USIU CTF - [pwn, blockchain, hashcat, stegnography] CYBERYAMI CTF - [reverse engineering, Malware analysis] Knight CTF - [Math, programming] Metasploit Bind Shell - [ Bind shell, metasploit ] DVWA Blind Sqli - [ SQL injection, sqlmap, dvwa ] S0lving_p0lyn0mials_0R_bRuteF0rcing - [ python3, ord(), reversing ] Binary Exploitation Tips - [ radare cheatsheet, gdb cheatsheet, cutter, ida, hopper, pwntools cheatsheet ] 2021 # Jkuat CTF - [ Base32, Base64, Reverse Enginering, Ghidra, openssl usage ] ","date":"28 July 2024","externalUrl":null,"permalink":"/posts/about-medium-blog/","section":"Blog Posts","summary":"This is a summary of the content in my Medium Blog","title":"Medium Blog","type":"posts"},{"content":"","date":"30 January 2024","externalUrl":null,"permalink":"/posts/","section":"Blog Posts","summary":"Blogs","title":"Blog Posts","type":"posts"},{"content":"","date":"30 January 2024","externalUrl":null,"permalink":"/tags/posts/","section":"Tags","summary":"","title":"Posts","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]